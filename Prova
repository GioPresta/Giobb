import pandas as pd
from datetime import datetime
import glob
import time
import sys
import os


def get_working_directory():
    """Restituisce la cartella di lavoro corretta per script o exe"""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))


def trova_file(base_name):
    """
    Cerca un file che contiene il nome base (es. REPCOMMG o COMMGFNZ)
    nella cartella di lavoro, ignorando eventuali numeri o prefissi/suffissi.
    """
    cartella = get_working_directory()
    pattern = os.path.join(cartella, f"*{base_name}*.TXT")
    files_trovati = glob.glob(pattern, recursive=False)

    if not files_trovati:
        print(f"‚ö†Ô∏è  ATTENZIONE: Nessun file trovato che contenga '{base_name}'")
        return None

    # Se ci sono pi√π file, prende quello pi√π recente (per data di modifica)
    file_scelto = max(files_trovati, key=os.path.getmtime)
    print(f"üìÑ Trovato file per '{base_name}': {os.path.basename(file_scelto)}")
    return file_scelto


def processare_repcommg():
    """Processa il file REPCOMMG.TXT"""
    file_path = trova_file("REPCOMMG")
    if not file_path:
        return []

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()
    except Exception as e:
        print(f"‚ùå Errore lettura {file_path}: {e}")
        return []

    risultati = []
    for line in lines:
        if len(line) < 80 or "SD" in line:
            continue

        polizza_text = line[0:11].strip()
        polizza = int(polizza_text) if polizza_text.isdigit() else polizza_text

        garanzia = line[11:16].strip()
        if garanzia.startswith("T"):
            garanzia = garanzia[1:]

        fondo = line[16:35].strip()

        comm_text = line[35:62].strip()
        commissioni = float(comm_text) / 10_000_000 if comm_text.isdigit() else 0.0

        tipo_op = line[62:64].strip()

        data1_text = line[64:72].strip()
        data2_text = line[72:80].strip()

        def parse_data(txt):
            if len(txt) == 8 and txt.isdigit():
                try:
                    return datetime(int(txt[:4]), int(txt[4:6]), int(txt[6:8])).date()
                except:
                    return None
            return None

        data1 = parse_data(data1_text)
        data2 = parse_data(data2_text)

        risultati.append({
            "Polizza": polizza,
            "Garanzia": garanzia,
            "Fondo": fondo,
            "Commissioni": commissioni,
            "Tipo Operazione": tipo_op,
            "Data effetto": data1,
            "Data competenza": data2
        })

    return risultati


def processare_commgfnz():
    """Processa il file COMMGFNZ.TXT"""
    file_path = trova_file("COMMGFNZ")
    if not file_path:
        return []

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()
    except Exception as e:
        print(f"‚ùå Errore lettura {file_path}: {e}")
        return []

    risultati = []
    for line in lines:
        if len(line) < 137 or "SD" in line:
            continue

        polizza_text = line[0:11].strip()
        polizza = int(polizza_text) if polizza_text.isdigit() else polizza_text

        garanzia = line[11:16].strip()
        if garanzia.startswith("T"):
            garanzia = garanzia[1:]

        fondo = line[16:35].strip()

        comm_text = line[35:62].strip()
        if comm_text.isdigit():
            commissioni_base = float(comm_text) / 10_000_000
            commissioni = round(commissioni_base * 0.76154, 2)
        else:
            commissioni = 0.0

        tipo_op = line[119:121].strip()

        data1_text = line[121:129].strip()
        data2_text = line[129:137].strip()

        def parse_data(txt):
            if len(txt) == 8 and txt.isdigit():
                try:
                    return datetime(int(txt[:4]), int(txt[4:6]), int(txt[6:8])).date()
                except:
                    return None
            return None

        data1 = parse_data(data1_text)
        data2 = parse_data(data2_text)

        risultati.append({
            "Polizza": polizza,
            "Garanzia": garanzia,
            "Fondo": fondo,
            "Commissioni": commissioni,
            "Tipo Operazione": tipo_op,
            "Data effetto": data1,
            "Data competenza": data2
        })

    return risultati


def main():
    """Funzione principale"""
    start_time = time.time()
    
    print("=" * 70)
    print("PROCESSAMENTO FILE REPCOMMG E COMMGFNZ")
    print("=" * 70)
    
    cartella = get_working_directory()
    if getattr(sys, 'frozen', False):
        print("Modalit√†: EXE compilato")
    else:
        print("Modalit√†: Script Python")
    
    print(f"Cartella di lavoro: {cartella}\n")

    print("Processando REPCOMMG...")
    dati_repcommg = processare_repcommg()
    print(f"‚úì REPCOMMG: {len(dati_repcommg)} righe processate")

    print("\nProcessando COMMGFNZ...")
    dati_commgfnz = processare_commgfnz()
    print(f"‚úì COMMGFNZ: {len(dati_commgfnz)} righe processate")

    print("\nUnendo tutti i dati...")
    tutti_dati = dati_repcommg + dati_commgfnz

    if tutti_dati:
        output_file = os.path.join(cartella, "REPCOMMG+COMMGFNZ.xlsx")
        try:
            with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
                df_repcommg = pd.DataFrame(dati_repcommg)
                df_commgfnz = pd.DataFrame(dati_commgfnz)
                df_finale = pd.DataFrame(tutti_dati)

                df_finale.to_excel(writer, sheet_name='FINALE', index=False)
                df_repcommg.to_excel(writer, sheet_name='REPCOMMG', index=False)
                df_commgfnz.to_excel(writer, sheet_name='COMMGFNZ', index=False)

            end_time = time.time()
            print(f"\n‚úÖ File Excel creato: {output_file}")
            print(f"üìä FINALE: {len(tutti_dati)} righe totali")
            print(f"‚è±Ô∏è  Tempo di esecuzione: {end_time - start_time:.2f}s")

        except Exception as e:
            print(f"\n‚ùå ERRORE durante la creazione dell‚ÄôExcel: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("\n‚ùå Nessun dato trovato")

    print("\n" + "=" * 70)
    input("\nPremi INVIO per chiudere...")


if __name__ == "__main__":
    main()