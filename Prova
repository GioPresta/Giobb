Perfetto! Hai le idee chiarissime 👌


---

🎯 Obiettivo finale aggiornato

Vuoi nel file finale:

Solo queste 5 colonne, in questo ordine preciso:


POLIZZA | ADESIONE | EFFETTO | ERRORE | SITUAZIONE

Dove:

Le prime 4 colonne vengono estratte dai dati reali

La colonna SITUAZIONE viene sempre aggiunta vuota come ultima colonna (per annotazioni future)




---

✅ Modifica al codice: forziamo la colonna SITUAZIONE come vuota

Ti lascio qui lo script completo e finale, aggiornato con:

colonna SITUAZIONE sempre presente

riempita con stringa vuota '' per ogni riga

nessuna dipendenza esterna (genera sia .txt che .csv leggibile da Excel)



---

🧾 Codice Python completo

import os
import re
import csv

# Regex di struttura
END_SECTION_PATTERN = re.compile(r'^\s*\*{5,}\s*$')
DECORATION_PATTERN = re.compile(r'^[\s\-\*=_\.]{4,}$')
START_HEADER_PATTERN = re.compile(r'^\s*LIVELLO\b', re.IGNORECASE)

# Colonne richieste in ordine
KEEP_COLUMNS = ['POLIZZA', 'ADESIONE', 'EFFETTO', 'ERRORE']

# Aggiungiamo sempre "SITUAZIONE" vuoto in fondo
FINAL_COLUMNS = KEEP_COLUMNS + ['SITUAZIONE']

def extract_section(file_path):
    with open(file_path, 'r', encoding='latin1') as f:
        in_section = False
        header = None
        content = []

        for line in f:
            line_clean = line.strip()

            if not in_section:
                if START_HEADER_PATTERN.match(line_clean):
                    header = line_clean
                    in_section = True
            else:
                if END_SECTION_PATTERN.match(line_clean):
                    break
                elif not DECORATION_PATTERN.match(line_clean) and line_clean:
                    content.append(line.rstrip())

        return header, content


def filter_columns(header_line, data_lines):
    split_header = re.split(r'\s{2,}', header_line.strip())
    col_indices = [i for i, col in enumerate(split_header) if col.upper() in KEEP_COLUMNS]
    selected_headers = [split_header[i] for i in col_indices]

    filtered_data = []
    for line in data_lines:
        fields = re.split(r'\s{2,}', line.strip())
        selected_fields = [fields[i] if i < len(fields) else '' for i in col_indices]
        selected_fields.append('')  # aggiunge colonna vuota SITUAZIONE
        filtered_data.append(selected_fields)

    return FINAL_COLUMNS, filtered_data


def write_csv_file(headers, data, output_csv='riepilogo.csv'):
    with open(output_csv, 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f, delimiter=';')
        writer.writerow(headers)
        writer.writerows(data)
    print(f"📄 CSV generato: {output_csv}")


def merge_all_reports(output_txt='riepilogo.txt', output_csv='riepilogo.csv'):
    current_dir = os.getcwd()
    txt_files = [f for f in os.listdir(current_dir)
                 if f.endswith('.txt') and f != output_txt]

    merged_data = []
    saved_header = None

    for txt_file in txt_files:
        file_path = os.path.join(current_dir, txt_file)
        header, content = extract_section(file_path)

        if header and saved_header is None:
            saved_header = header.strip()

        if content:
            merged_data.extend(content)

    # Applichiamo il filtro colonne
    if saved_header:
        filtered_headers, filtered_data = filter_columns(saved_header, merged_data)
    else:
        filtered_headers, filtered_data = FINAL_COLUMNS, []

    # Scrivi TXT
    with open(output_txt, 'w', encoding='utf-8') as out:
        out.write('  '.join(filtered_headers) + '\n')
        for row in filtered_data:
            out.write('  '.join(row) + '\n')
    print(f"📝 File testo generato: {output_txt}")

    # Scrivi CSV
    write_csv_file(filtered_headers, filtered_data, output_csv)


if __name__ == "__main__":
    merge_all_reports()


---

✅ Esempio di riepilogo.csv

POLIZZA	ADESIONE	EFFETTO	ERRORE	SITUAZIONE

001234	A01	2025-07	RuntimeException	
001235	A02	2025-07	NullPointerException	



---

Fammi sapere se vuoi:

che SITUAZIONE venga precompilata con qualcosa (es: "DA VERIFICARE")

aggiungere un filtro per tipo errore

esportare anche in .xlsx


Pronto a fartelo in pochi secondi!

