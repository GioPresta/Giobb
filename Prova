import os
import sys
import time
import pandas as pd
from datetime import datetime

# ============================
# CONFIGURAZIONE DA COMPLETARE
# ============================

SEARCH_PATTERN = "GCA_"  # Prefisso del file da cercare

RAW_TITLES = [  # <-- INSERISCI QUI I TITOLI DELLE COLONNE
]

DATE_COLUMNS = [  # <-- INSERISCI QUI LE COLONNE CON DATE
]

NUMERIC_COLUMNS = [  # <-- INSERISCI QUI LE COLONNE NUMERICHE
]

COLUMN_INDICES = [  # <-- INSERISCI QUI GLI INDICI (0-based) DELLE COLONNE DA COPIARE
]

CHUNK_SIZE = 50000  # Numero di righe lette per volta


# ============================
# FUNZIONI DI SUPPORTO
# ============================

def force_date_conversion(date_str):
    """Converte le date, sostituendo il 9999 con 9998 per compatibilità Excel."""
    if pd.isna(date_str) or not str(date_str).strip():
        return None
    s = str(date_str).strip()
    try:
        if "9999" in s:
            return datetime(9998, 12, 31)
        if "/" in s:
            parts = s.split("/")
            if len(parts[0]) == 4:
                y, m, d = map(int, parts)
            else:
                d, m, y = map(int, parts)
            return datetime(y, m, d)
        dt = pd.to_datetime(s, errors="coerce")
        if pd.notna(dt):
            return datetime(9998, dt.month, dt.day) if dt.year == 9999 else dt.to_pydatetime()
    except:
        return None
    return None


def append_chunk_to_excel(writer, df, sheet_name):
    """Scrive un chunk in un foglio Excel, continuando in coda se già esiste."""
    if sheet_name not in writer.sheets:
        startrow = 0
    else:
        startrow = writer.sheets[sheet_name].dim_rowmax or 0
    df.to_excel(writer, sheet_name=sheet_name, index=False, header=False, startrow=startrow)


# ============================
# AVVIO PROGRAMMA
# ============================

input_file = next((f for f in os.listdir(".") if f.startswith(SEARCH_PATTERN) and f.endswith(".txt")), None)
if not input_file:
    print(f"❌ Nessun file trovato che inizia con '{SEARCH_PATTERN}'")
    sys.exit(1)

output_file = f"{os.path.splitext(input_file)[0]}.xlsx"
start_time = time.time()

print(f"📂 File trovato: {input_file}")
print(f"💾 Output: {output_file}")
print("⏳ Elaborazione in corso...")

with pd.ExcelWriter(output_file, engine="xlsxwriter", date_format="dd/mm/yyyy") as writer:
    workbook = writer.book
    date_fmt = workbook.add_format({'num_format': 'dd/mm/yyyy'})
    num_fmt = workbook.add_format({'num_format': '0.00'})

    for chunk in pd.read_csv(input_file, sep=';', header=None, dtype=str, chunksize=CHUNK_SIZE, low_memory=False):
        # Aggiusta titoli
        while len(RAW_TITLES) < len(chunk.columns):
            RAW_TITLES.append(f"Campo_Extra_{len(RAW_TITLES)+1}")
        chunk.columns = RAW_TITLES[:len(chunk.columns)]

        # ====================
        # 🔹 Conversioni
        # ====================
        for col in [c for c in DATE_COLUMNS if c in chunk.columns]:
            chunk[col] = chunk[col].apply(force_date_conversion)
        for col in [c for c in NUMERIC_COLUMNS if c in chunk.columns]:
            chunk[col] = pd.to_numeric(chunk[col].str.replace(",", "."), errors="coerce")

        # ====================
        # 🔹 Foglio "Originale"
        # ====================
        if 'Originale' not in writer.sheets:
            # Scrivi header e seconda riga con ColumnX
            header_df = pd.DataFrame([RAW_TITLES[:len(chunk.columns)],
                                      [f"Column{i+1}" for i in range(len(chunk.columns))]])
            header_df.to_excel(writer, sheet_name='Originale', index=False, header=False)
            startrow = 2
        else:
            startrow = writer.sheets['Originale'].dim_rowmax or 0

        chunk.to_excel(writer, sheet_name='Originale', index=False, header=False, startrow=startrow)

        # ====================
        # 🔹 Foglio "DA_COPIARE"
        # ====================
        subset = chunk.iloc[:, COLUMN_INDICES].copy()

        if 'DA_COPIARE' not in writer.sheets:
            # Scrivi header + ColumnX
            headers = [RAW_TITLES[i] for i in COLUMN_INDICES]
            cols_row = [f"Column{i+1}" for i in range(len(COLUMN_INDICES))]
            header_df = pd.DataFrame([headers, cols_row])
            header_df.to_excel(writer, sheet_name='DA_COPIARE', index=False, header=False)
            startrow_copy = 2
        else:
            startrow_copy = writer.sheets['DA_COPIARE'].dim_rowmax or 0

        subset.to_excel(writer, sheet_name='DA_COPIARE', index=False, header=False, startrow=startrow_copy)

    # ====================
    # 🔹 Formattazione Excel
    # ====================
    ws_orig = writer.sheets['Originale']
    ws_copy = writer.sheets['DA_COPIARE']

    for col_idx, col_name in enumerate(RAW_TITLES):
        if col_name in DATE_COLUMNS:
            ws_orig.set_column(col_idx, col_idx, 12, date_fmt)
        elif col_name in NUMERIC_COLUMNS:
            ws_orig.set_column(col_idx, col_idx, 12, num_fmt)

    for idx in COLUMN_INDICES:
        col_name = RAW_TITLES[idx]
        if col_name in DATE_COLUMNS:
            ws_copy.set_column(idx, idx, 12, date_fmt)
        elif col_name in NUMERIC_COLUMNS:
            ws_copy.set_column(idx, idx, 12, num_fmt)

# ============================
# FINE
# ============================

elapsed = time.time() - start_time
print(f"✅ Completato in {elapsed:.1f} secondi")
print(f"📘 File creato: {output_file}")