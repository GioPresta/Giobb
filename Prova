Perfetto. Ora ho capito esattamente cosa intendi:


---

‚úÖ Obiettivo chiarissimo:

Le prime 6 righe, a partire da quella con LIVELLO, compongono tutte insieme l‚Äôintestazione

Ogni colonna reale √® composta da una "colonna verticale" di 6 parole, una per riga

I dati nei file sono allineati visivamente sotto queste 6 righe

Quindi bisogna unire le parole colonna per colonna per ottenere le intestazioni vere



---

üß† Strategia corretta:

1. Quando trovi la riga LIVELLO, prendi anche le 5 righe successive ‚áí ottieni 6 righe totali


2. Le spezzettiamo in "colonne", estraendo parola per parola in verticale


3. Combiniamo le parole in ciascuna ‚Äúcolonna‚Äù per ottenere nomi veri delle colonne


4. Poi prendiamo le righe dei dati e le associamo a queste intestazioni




---

üßæ Codice aggiornato per interpretare correttamente le 6 righe come intestazione completa

import os
import re
import csv

# Pattern per trovare inizio blocco
inizio_tabella = re.compile(r'^\s*LIVELLO\b', re.IGNORECASE)
fine_tabella = re.compile(r'^\s*\*{5,}\s*$')
decorazioni = re.compile(r'^[\s\-\*=_\.]{4,}$')

header_matrix = []  # le 6 righe
header_built = False
final_headers = []
righe_dati = []

for nome_file in os.listdir():
    if nome_file.endswith('.txt') and not nome_file.startswith('riepilogo'):
        with open(nome_file, 'r', encoding='latin1') as f:
            lines = f.readlines()
            start_index = None

            # Trova la riga "LIVELLO"
            for i, line in enumerate(lines):
                if inizio_tabella.match(line.strip()):
                    start_index = i
                    break

            if start_index is not None:
                # Se ancora non abbiamo preso le 6 righe di intestazione
                if not header_built:
                    header_matrix = [lines[start_index + j].rstrip('\n') for j in range(6)]
                    header_built = True

                # Righe dei dati, da dopo le 6 righe
                for line in lines[start_index + 6:]:
                    clean = line.strip()
                    if fine_tabella.match(clean):
                        break
                    if clean and not decorazioni.match(clean):
                        righe_dati.append(clean)

# üî† Costruzione intestazioni colonna per colonna
def build_headers_from_lines(righe):
    split_lines = [re.split(r'\s{2,}', r.strip()) for r in righe]
    max_col = max(len(r) for r in split_lines)
    # Normalizza tutte le righe alla stessa lunghezza
    for row in split_lines:
        while len(row) < max_col:
            row.append('')
    # Trasponi e unisci verticalmente
    headers = [' '.join(col).strip() for col in zip(*split_lines)]
    return headers

final_headers = build_headers_from_lines(header_matrix)

# üìù Scrive riepilogo.txt
with open('riepilogo.txt', 'w', encoding='utf-8') as f:
    f.write('\n'.join(header_matrix) + '\n')
    for r in righe_dati:
        f.write(r + '\n')

# üìä Scrive riepilogo.csv
with open('riepilogo.csv', 'w', encoding='utf-8', newline='') as f:
    writer = csv.writer(f, delimiter=';')
    writer.writerow(final_headers)
    for line in righe_dati:
        valori = re.split(r'\s{2,}', line.strip())
        writer.writerow(valori)

print("‚úÖ Fatto! Intestazione combinata verticalmente da 6 righe.")


---

‚úÖ Esempio (semplificato visivamente)

Se le prime 6 righe sono:

LIVELLO    OGGETTO     TIPO
ID         OPERAZIONE  STATUS
DATA       TABELLA     ERRORE
EFFETTO    LABEL       POLIZZA
ADESIONE   SERVIZIO    TABELLA
DESCRIZ.   ...         ...

Lo script costruir√† intestazioni cos√¨:

LIVELLO ID DATA EFFETTO ADESIONE DESCRIZ.  
OGGETTO OPERAZIONE TABELLA LABEL SERVIZIO ...
TIPO STATUS ERRORE POLIZZA TABELLA ...

e le combiner√† come:

['LIVELLO ID DATA EFFETTO ADESIONE DESCRIZ.', 'OGGETTO OPERAZIONE TABELLA LABEL SERVIZIO ...', ...]

‚úÖ Cos√¨ ottieni un file riepilogo.csv con colonne leggibili e coerenti con la struttura originale.


---

Fammi sapere se vuoi:

forzare il numero di colonne (es. sempre 10)

tenere spazi o sostituirli con _

aggiungere il nome del file in fondo a ogni riga


Tutto pronto in pochi secondi!
