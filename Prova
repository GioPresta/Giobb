import os
import pandas as pd
import xlsxwriter
from datetime import datetime
import time
import sys
import glob
import tempfile

def format_time(seconds):
    if seconds < 60:
        return f"{seconds:.2f} secondi"
    else:
        minutes = seconds / 60
        return f"{minutes:.1f} minuti"

def print_progress(current, total, operation="", start_time=None):
    if total == 0:
        return
    
    percentage = (current / total) * 100
    bar_length = 50
    filled_length = int(bar_length * current // total)
    bar = "█" * filled_length + "░" * (bar_length - filled_length)
    
    time_info = ""
    if start_time and current > 0:
        elapsed_time = time.time() - start_time
        if elapsed_time > 0:
            rate = current / elapsed_time
            if rate > 0:
                remaining_time = (total - current) / rate
                time_info = f" | Tempo rimanente: {format_time(remaining_time)}"
    
    sys.stdout.write(f"\r{operation} [{bar}] {percentage:.1f}% ({current}/{total}){time_info}")
    sys.stdout.flush()
    
    if current == total:
        print()

def force_date_conversion(date_str):
    if pd.isna(date_str) or date_str == "" or str(date_str).strip() == "":
        return None
    
    date_str = str(date_str).strip()
    
    try:
        if "31/12/9999" in date_str or date_str == "9999/12/31" or "9999" in date_str:
            return datetime(9998, 12, 31)
        
        if "/" in date_str and len(date_str.split("/")) == 3:
            parts = date_str.split("/")
            
            if len(parts[0]) == 4 and int(parts[0]) > 1800:
                year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
                if year == 9999:
                    return datetime(9998, month, day)
                return datetime(year, month, day)
            
            elif int(parts[0]) <= 31:
                day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
                if year == 9999:
                    return datetime(9998, month, day)
                return datetime(year, month, day)
        
        converted = pd.to_datetime(date_str, errors='coerce')
        if pd.notna(converted):
            if converted.year == 9999:
                return datetime(9998, converted.month, converted.day)
            return converted.to_pydatetime()
    
    except Exception as e:
        print(f"Errore nella conversione della data '{date_str}': {e}")
        return None
    
    return None

search_pattern = "GCA_00032"

input_file = None
for file in os.listdir("."):
    if file.startswith(search_pattern) and file.endswith(".txt"):
        input_file = file
        break

if input_file is None:
    print(f"Errore: Nessun file .txt trovato che inizia con '{search_pattern}'")
    exit()

print(f"File trovato: {input_file}")

columns_requested = [
    1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 
    52, 57, 58, 59, 60, 64, 78, 79, 80, 81, 86, 89, 91, 94
]

column_indices = [i - 1 for i in columns_requested]

column_headers = [
    "DTA_RFR", "NUL_PLZ", "CDC_TAR", "CDC_FND", "DTA_NAS_A1", 
    "FRZ_PRM", "RIP_PRE", "RIS_MAT", "RIS_MAT_I", "CDC_CNV", 
    "RAMO", "FRM_TAR", "T_TCN", "IND_COL", "DATA_SCAD_PREMI",
    "COL16", "COL17", "COL18", "COL19", "COL20", "COL21", "COL22", 
    "COL23", "COL24", "COL25", "COL26", "COL27", "COL28", "COL29", "COL30"
]

column_to_remove = "IND_COL"

date_columns = ["DTA_RFR", "DTA_NAS_A1", "DTA_DEC", "DTA_SCA", "DATA_SCAD_PREMI"]

numeric_columns = [
    "NUM_TST", "NUM_PLZ", "FRZ_PRM", "RIP_PRE", "RIS_MAT_A", "MIN_GAR", "MIN_TRAT", 
    "COM_MANT", "T_TCN"
]

text_columns = ["COD_FND"]

raw_titles = ["NUM_PROGRESSIVO", "DTA_RFR", "CDC_AZ", "NUM_TST", "NUM_GLI", "DEC_QNT_CLI",
              "COC_TAR","COC_FND","COC_CNL_VND","COC_VND","COC_STA_POL","BETA",
              "DTA_NAS_A1", "ETA_A1", "ETA_CALC_A1", "SESSO_A1", "STA_A1", "DTA_NAS_A2",
              "ETA_A2", "ETA_CALC_A2", "SESSO_A2", "STA_A2", "DTA_EMS", "DTA_DEC", "DTA_SCA",
              "DTA_NEW_PRD", "DTA_STR_PRE", "DUR", "DUR_P", "ANT_DUR", "CG_V", "CG_M", "CR_V", "CR_M", "CG_AV", "CG_AM",
              "CR_AV", "CR_AM", "CPAU_V", "CPAU_M", "TSO_STB", "PG", "PR", "PRO", "PIR", "PG_A", "PR_A", "PIR_CTR",
              "FRZ_PRM", "INT_FRZ", "COMP_P", "COMP_PT", "RIP_PRE", "RIS_MAT_A", "RIS_SPE", "RIS_AL_1",
              "RIS_SIC", "RIS_SOV", "RIS_INT_R", "RIS_ZILLER", "RIS_AL_1M", "RIS_AL_2", "RIS_AL_3", "RIS_AL_4", "RIS_AL_5",
              "CDC_RIZ", "DTA_RIZ", "CDC_COA", "DTA_COA", "COC_FND_COA", "DTA_FIN", "COC_GAR_COA", "MIN_GAR", "MIN_TRAT",
              "CDC_PAESE_RISCHIO", "VAL_RISCATTO", "CDC_ASSICURATORE_INFRAGRUPPO", "ID_SIS_ALIM",
              "TPO_PRM", "TPO_IND", "FLAG_AS", "DTA_FINE_AS",
              "RAMO", "FRM_TAR", "PERC_PROV_AGG", "PERC_INDENN", "T_TCN", "NUM_QUOTE", "DTA_VALQUO_ANNIV",
              "VALO_QUOTE_ANNIV", "DTA_VALQUO_RISE", "VALO_QUOTE_RISE",
              "RISCATTI_PARZIALI", "MIN_GAR_SCAD", "GAR_AGGIUNTIVA", "GAR_COMMORIENZA", "CAP_RID_INIZ",
              "CUMULO_PREMI", "CONV_ORIGINAL", "NOME_ASSICURATO", "NOME_ASSICURATO",
              "COD_FISC_ASSICURATO", "NOME_CONTRAENTE", "COGNOME_CONTRAENTE", "COD_FISC_CONTRAENTE",
              "YND_COLL", "LOB", "RFF", "HRG", "CLASSE_IAS", "TIPO_RISCHIO", "UNBUNDLING", "DPF", "CRITERIO_VALUTAZIONE",
              "STA",
              "CAU", "CONTRATTO", "ABI", "CAB", "FILIALE", "PROV_FILIALE", "DATA_SCAD_PREMI", "CDC_PROD",
              "COD_DIVISIONE", "NUMERO_FINANZIAMENTO", "DEBITO_RESIDUO", "RISERVA_ESTINZ_ANTICIPATA",
              "PVF_TAR_ALIM",
              "CUMULO_VERSAMENTI_AGGIUNTIVI", "FONDO_UTILI"]

print(f"Elaborazione del file: {input_file}")
print("NOTA: Le date 31/12/9999 vengono convertite in 31/12/9998 per compatibilità Excel")
step_start = time.time()

try:
    with open(input_file, encoding="utf-8") as file:
        lines = [line.rsplit(';', 1)[0] + '\n' for line in file.readlines()[1:-1]]
except UnicodeDecodeError:
    with open(input_file, encoding="latin-1") as file:
        lines = [line.rsplit(';', 1)[0] + '\n' for line in file.readlines()[1:-1]]

print(f"File letto: {len(lines)} righe (escluse prima e ultima)")

print("Creazione file temporaneo...")
temp_start = time.time()
with open("temp.txt", encoding="utf-8", mode="w") as temp_file:
    for i, line in enumerate(lines):
        temp_file.write(line)
        if i % 1000 == 0 or i == len(lines) - 1:
            print_progress(i + 1, len(lines), "Processando righe", temp_start)

print("Lettura dati con pandas...")
df_raw = pd.read_csv("temp.txt", sep=';', header=None, dtype=str, low_memory=False, engine='c')

print(f"Dati caricati: {len(df_raw)} righe, {len(df_raw.columns)} colonne")
print(f"Tempo Lettura file: {format_time(time.time() - step_start)}\n")

print("Formattazione dati RAW...")

while len(raw_titles) < len(df_raw.columns):
    raw_titles.append(f"Campo_Extra_{len(raw_titles)+1}")

raw_titles = raw_titles[:len(df_raw.columns)]

raw_date_column_indices = []
for date_col in date_columns:
    if date_col in raw_titles:
        raw_date_column_indices.append(raw_titles.index(date_col))

if raw_date_column_indices:
    print("Conversione colonne date nel RAW...")
    for col_idx in raw_date_column_indices:
        col_name = raw_titles[col_idx]
        print(f"Processando colonna date RAW: {col_name}")
        df_raw.iloc[:, col_idx] = df_raw.iloc[:, col_idx].apply(force_date_conversion)

print("Conversione colonne numeriche nel RAW...")
for num_col in numeric_columns:
    if num_col in raw_titles:
        col_idx = raw_titles.index(num_col)
        print(f"Processando colonna numerica RAW: {num_col}")
        df_raw.iloc[:, col_idx] = pd.to_numeric(df_raw.iloc[:, col_idx], errors='coerce')

print("Preparazione fogli filtrati...")
if len(df_raw.columns) >= max(column_indices) + 1:
    df_sheet2 = df_raw.iloc[:, column_indices].copy()
    df_sheet2.columns = column_headers[:len(df_sheet2.columns)]
    
    if column_to_remove in df_sheet2.columns:
        df_sheet1 = df_sheet2.drop(columns=[column_to_remove]).copy()
        print(f"Foglio finale: {len(df_sheet1.columns)} colonne (era {len(df_sheet2.columns)} nel completo)")
    else:
        print(f"ERRORE: Colonna '{column_to_remove}' non trovata nel foglio 2!")
        df_sheet1 = df_sheet2.copy()

print("Inizializzazione file Excel...")
base_name = os.path.splitext(input_file)[0]
output_file = f"{base_name}_processed.xlsx"

workbook = xlsxwriter.Workbook(output_file, {
    'constant_memory': True,
    'tmpdir': tempfile.gettempdir(),
    'default_date_format': 'dd/mm/yyyy'
})

date_format = workbook.add_format({'num_format': 'dd/mm/yyyy'})
text_format = workbook.add_format({'num_format': '@'})

print("Creazione foglio 1: Finale...")
ws_finale = workbook.add_worksheet("Finale")

ws_finale.write_row(0, 0, list(df_sheet1.columns))
ws_finale.write_row(1, 0, [f"Column{i+1}" for i in range(len(df_sheet1.columns))])

write_start = time.time()
for row_idx, (_, row) in enumerate(df_sheet1.iterrows()):
    row_data = []
    for col_name, value in row.items():
        if pd.isna(value) or value is None:
            row_data.append("")
        elif isinstance(value, datetime):
            row_data.append(value)
        else:
            row_data.append(value)
    
    ws_finale.write_row(row_idx + 2, 0, row_data)
    
    if row_idx % 5000 == 0 or row_idx == len(df_sheet1) - 1:
        print_progress(row_idx + 1, len(df_sheet1), "Righe Finale", write_start)

for col_idx, col_name in enumerate(df_sheet1.columns):
    if col_name in date_columns:
        ws_finale.set_column(col_idx, col_idx, None, date_format)
    elif col_name in text_columns:
        ws_finale.set_column(col_idx, col_idx, None, text_format)

print("\nCreazione foglio 2: COD_FISC_CONTRAENTE...")
ws_completo = workbook.add_worksheet("COD_FISC_CONTRAENTE")

ws_completo.write_row(0, 0, list(df_sheet2.columns))
ws_completo.write_row(1, 0, [f"Column{i+1}" for i in range(len(df_sheet2.columns))])

write_start = time.time()
for row_idx, (_, row) in enumerate(df_sheet2.iterrows()):
    row_data = []
    for col_name, value in row.items():
        if pd.isna(value) or value is None:
            row_data.append("")
        elif isinstance(value, datetime):
            row_data.append(value)
        else:
            row_data.append(value)
    
    ws_completo.write_row(row_idx + 2, 0, row_data)
    
    if row_idx % 5000 == 0 or row_idx == len(df_sheet2) - 1:
        print_progress(row_idx + 1, len(df_sheet2), "Righe Completo", write_start)

for col_idx, col_name in enumerate(df_sheet2.columns):
    if col_name in date_columns:
        ws_completo.set_column(col_idx, col_idx, None, date_format)
    elif col_name in text_columns:
        ws_completo.set_column(col_idx, col_idx, None, text_format)

print("\nCreazione foglio 3: Originale...")
ws_originale = workbook.add_worksheet("Originale")

ws_originale.write_row(0, 0, raw_titles)
ws_originale.write_row(1, 0, [f"Column{i+1}" for i in range(len(df_raw.columns))])

write_start = time.time()
chunk_size = 5000
total_rows = len(df_raw)

for chunk_start in range(0, total_rows, chunk_size):
    chunk_end = min(chunk_start + chunk_size, total_rows)
    chunk_data = []
    
    for row_idx in range(chunk_start, chunk_end):
        row = df_raw.iloc[row_idx]
        row_data = []
        for col_idx, value in enumerate(row):
            if pd.isna(value) or value is None:
                row_data.append("")
            elif isinstance(value, datetime):
                row_data.append(value)
            else:
                row_data.append(value)
        chunk_data.append(row_data)
    
    for i, row_data in enumerate(chunk_data):
        ws_originale.write_row(chunk_start + i + 2, 0, row_data)
    
    print_progress(chunk_end, total_rows, "Righe Originale", write_start)

for col_idx in raw_date_column_indices:
    ws_originale.set_column(col_idx, col_idx, None, date_format)

for text_col in text_columns:
    if text_col in raw_titles:
        col_idx = raw_titles.index(text_col)
        ws_originale.set_column(col_idx, col_idx, None, text_format)

print("\nSalvataggio file Excel...")
save_start = time.time()
workbook.close()
save_time = time.time() - save_start

if os.path.exists("temp.txt"):
    os.remove("temp.txt")

temp_files = glob.glob("tmp*.tmp") + glob.glob("tmp*")
for temp_file in temp_files:
    try:
        if os.path.exists(temp_file):
            os.remove(temp_file)
            print(f"Rimosso file temporaneo: {temp_file}")
    except:
        pass

total_time = time.time() - step_start
print(f"Salvataggio completato in {format_time(save_time)}")
print("\nPROCESSO COMPLETATO!")
print(f"File creato: {output_file}")
print("Fogli contenuti:")
print(f"    1. 'Finale' - {len(df_sheet1.columns)} colonne")
print(f"    2. 'COD_FISC_CONTRAENTE' - {len(df_sheet2.columns)} colonne")  
print(f"    3. 'Originale' - {len(df_raw.columns)} colonne")

if total_time > 0:
    rows_per_second = len(df_raw) / total_time
    print(f"Performance: {rows_per_second:.0f} righe/secondo")

print(f"Tempo totale: {format_time(total_time)}")