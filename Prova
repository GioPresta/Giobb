Perfetto! Ora la logica Ã¨ completamente chiara, te la sintetizzo una volta per tutte e poi ti do il blocco Python definitivo che rispetta esattamente le tue regole.


---

âœ… LOGICA DEFINITIVA

ðŸ”¹ 1. Nuova riga CSV

Una riga del file .txt diventa nuova riga nel .csv solo se:

Inizia con esattamente 3 spazi ('   ')


Tutte le righe successive che non iniziano con 3 spazi:

Appartengono alla stessa riga CSV

Appartengono alla stessa colonna (vengono concatenate nella stessa cella)



ðŸ”¹ 2. Colonne

Lâ€™unico modo per separare in piÃ¹ colonne Ã¨ nella riga che inizia con 3 spazi

In quella riga:

Si fa split in colonne solo se ci sono almeno 4 spazi consecutivi

Frasi come ;  o .  non separano colonne


Le righe successive vanno tutte nella stessa colonna finale della riga precedente



---

ðŸ§© BLOCCO PYTHON DEFINITIVO

import re

def formatta_blocchi_da_testo(path_txt, output_csv):
    with open(path_txt, 'r', encoding='latin-1') as f:
        righe = f.readlines()

    righe = righe[3:]  # Elimina prime 3 righe

    righe_formattate = []
    riga_corrente = []
    colonna_accumulata = ''  # Contenuto multilinea per l'ultima colonna

    def splitta_riga_in_colonne(riga):
        # Split solo su 4 o piÃ¹ spazi
        return [col.strip() for col in re.split(r'\s{4,}', riga.strip()) if col.strip()]

    for riga in righe:
        testo = riga.rstrip('\n')

        if testo.startswith('   ') and not testo.startswith('    '):  # Nuova riga CSV
            if riga_corrente:
                # Aggiungi contenuto multilinea se presente
                if colonna_accumulata.strip():
                    riga_corrente.append(colonna_accumulata.strip())
                righe_formattate.append(';'.join(riga_corrente))
            # Ricomincia nuova riga
            riga_corrente = splitta_riga_in_colonne(testo)
            colonna_accumulata = ''
        else:
            # Riga di continuazione: va nella stessa ultima colonna
            colonna_accumulata += ' ' + testo.strip()

    # Ultima riga finale
    if riga_corrente:
        if colonna_accumulata.strip():
            riga_corrente.append(colonna_accumulata.strip())
        righe_formattate.append(';'.join(riga_corrente))

    # Scrittura su CSV
    with open(output_csv, 'w', encoding='utf-8') as f:
        for r in righe_formattate:
            f.write(r + '\n')

    print(f"âœ… CSV generato con successo: {output_csv}")


---

ðŸ“Œ Comportamento finale

Le colonne sono create solo dalla riga che inizia con 3 spazi usando \s{4,} (quattro o piÃ¹ spazi)

Tutte le righe successive, anche se contengono . ; :, ecc.:

Vanno nell'ultima colonna di quella riga

Vengono concatenate come un unico testo




---

ðŸ§ª Esempio

Input .txt:

3    000000001    Codice Errore   ALTRO
Dettaglio errore con valori
Altro testo aggiuntivo
   5    000000002    Errore diverso
Altro dettaglio

Output .csv:

3;000000001;Codice Errore;ALTRO;Dettaglio errore con valori Altro testo aggiuntivo
5;000000002;Errore diverso;Altro dettaglio


---

Vuoi anche:

Rimuovere eventuali \n nel contenuto concatenato?

Limitare il numero massimo di colonne?


Fammi sapere e te lo rifinisco.

