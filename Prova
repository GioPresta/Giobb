Perfetto! Aggiorniamo ora la logica per soddisfare il tuo nuovo requisito:


---

‚úÖ Obiettivo Aggiuntivo

Nel file finale (output_merged.txt) rimuovere le righe che iniziano con:

LIVELLO

ID

OPERAZIONE


‚ö†Ô∏è Lasciare invece tutto il resto, incluso:

GRAVITA'

ADESIONE

ERRORE

I dati veri e propri



---

üêç SCRIPT AGGIORNATO: Rimozione selettiva intestazioni iniziali

import os

# Intestazioni da rimuovere solo nella fase finale
HEADERS_TO_DELETE = [
    "LIVELLO",
    "ID",
    "OPERAZIONE"
]

# Intestazioni da deduplicare (una sola volta)
HEADERS_TO_DEDUPLICATE = [
    "GRAVITA'",
    "ADESIONE",
    "ERRORE"
]

def process_file(filepath):
    with open(filepath, 'r', encoding='latin-1') as f:
        lines = f.readlines()

    i = 0
    while i < len(lines) and 'LIVELLO' not in lines[i]:
        i += 1

    if i >= len(lines):
        return []

    output = []

    # Copia le 6 righe da LIVELLO incluso
    output.extend(lines[i:i+6])
    i += 6

    # Copia righe utili fino agli asterischi, saltando trattini/spazi
    while i < len(lines):
        line = lines[i]
        if line.strip().startswith('***'):
            break
        if not set(line.strip()).issubset(set('- ')):
            output.append(line)
        i += 1

    return output

def clean_and_filter_final(output_path):
    with open(output_path, 'r', encoding='latin-1') as f:
        lines = f.readlines()

    cleaned = []
    seen_headers = set()

    for line in lines:
        stripped = line.strip()

        # Salta righe vuote o solo trattini/spazi
        if not stripped or set(stripped).issubset(set('- ')):
            continue

        # Elimina intestazioni da eliminare (LIVELLO, ID, OPERAZIONE)
        if any(stripped.startswith(h) for h in HEADERS_TO_DELETE):
            continue

        # Deduplica GRAVITA', ADESIONE, ERRORE
        if any(stripped.startswith(h) for h in HEADERS_TO_DEDUPLICATE):
            prefix = next(h for h in HEADERS_TO_DEDUPLICATE if stripped.startswith(h))
            if prefix in seen_headers:
                continue
            seen_headers.add(prefix)

        cleaned.append(line)

    with open(output_path, 'w', encoding='latin-1') as f:
        f.writelines(cleaned)

def main():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    output_filename = 'output_merged.txt'
    output_path = os.path.join(current_dir, output_filename)

    txt_files = sorted([
        f for f in os.listdir(current_dir)
        if f.endswith('.txt') and f != output_filename
    ])

    merged_output = []
    for filename in txt_files:
        filepath = os.path.join(current_dir, filename)
        result = process_file(filepath)
        if result:
            merged_output.extend(result)
            merged_output.append('\n')

    with open(output_path, 'w', encoding='latin-1') as out_f:
        out_f.writelines(merged_output)

    # Pulizia intestazioni e righe non volute
    clean_and_filter_final(output_path)

    print(f'‚úÖ File finale pronto e filtrato correttamente: {output_path}')


if __name__ == "__main__":
    main()


---

‚úÖ Riassunto del comportamento

Azione	Eseguita?



|

