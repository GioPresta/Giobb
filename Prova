Perfetto! Ecco lo script finale completo, con tutte le logiche implementate e con l‚Äôoutput finale salvato come Riepilogo.txt.


---

‚úÖ Funzionalit√† dello script

1. Legge tutti i file .txt nella cartella.


2. Per ogni file:

Trova LIVELLO, copia quella riga e le 5 successive (6 righe totali).

Copia tutte le righe fino agli ***, escludendo righe fatte solo di trattini/spazi.



3. Deduplica le intestazioni (LIVELLO, ID, OPERAZIONE, GRAVITA', ADESIONE, ERRORE) ‚Üí solo una volta.


4. Elimina tutte le righe composte solo da trattini o spazi.


5. Alla fine, elimina le prime 3 righe del file finale.


6. Tutto in latin-1, nessuna conversione in UTF-8.


7. Output in un file chiamato Riepilogo.txt.




---

üêç SCRIPT DEFINITIVO

import os

# Intestazioni da deduplicare
HEADER_PREFIXES = [
    "LIVELLO",
    "ID",
    "OPERAZIONE",
    "GRAVITA'",
    "ADESIONE",
    "ERRORE"
]

def process_file(filepath):
    with open(filepath, 'r', encoding='latin-1') as f:
        lines = f.readlines()

    i = 0
    while i < len(lines) and 'LIVELLO' not in lines[i]:
        i += 1

    if i >= len(lines):
        return []

    output = []

    # Copia le 6 righe da "LIVELLO" incluso
    output.extend(lines[i:i+6])
    i += 6

    # Copia tutto fino agli asterischi, saltando righe solo di trattini/spazi
    while i < len(lines):
        line = lines[i]
        if line.strip().startswith('***'):
            break
        if not set(line.strip()).issubset(set('- ')):
            output.append(line)
        i += 1

    return output

def clean_and_deduplicate(output_path):
    with open(output_path, 'r', encoding='latin-1') as f:
        lines = f.readlines()

    cleaned = []
    seen_headers = set()

    for line in lines:
        stripped = line.strip()

        # Salta righe vuote o solo trattini/spazi
        if not stripped or set(stripped).issubset(set('- ')):
            continue

        # Deduplica intestazioni
        if any(stripped.startswith(h) for h in HEADER_PREFIXES):
            prefix = next(h for h in HEADER_PREFIXES if stripped.startswith(h))
            if prefix in seen_headers:
                continue
            seen_headers.add(prefix)

        cleaned.append(line)

    # Elimina le prime 3 righe dal risultato finale
    cleaned = cleaned[3:]

    with open(output_path, 'w', encoding='latin-1') as f:
        f.writelines(cleaned)

def main():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    output_filename = 'Riepilogo.txt'
    output_path = os.path.join(current_dir, output_filename)

    txt_files = sorted([
        f for f in os.listdir(current_dir)
        if f.endswith('.txt') and f != output_filename
    ])

    merged_output = []
    for filename in txt_files:
        filepath = os.path.join(current_dir, filename)
        result = process_file(filepath)
        if result:
            merged_output.extend(result)
            merged_output.append('\n')  # separatore tra blocchi

    with open(output_path, 'w', encoding='latin-1') as out_f:
        out_f.writelines(merged_output)

    clean_and_deduplicate(output_path)

    print(f'‚úÖ File finale creato: {output_path}')


if __name__ == "__main__":
    main()


---

üìÑ Output finale: Riepilogo.txt

Contiene:

le intestazioni (una sola volta),

tutti i dati rilevanti dei file,

nessuna r


